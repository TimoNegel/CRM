@page "/status/edit"
@attribute [Authorize(Roles = "Admin")]

<MudPaper Class="pa-4" Elevation="4" Style="width:100%; height:100%; border-radius:16px; box-shadow:0 4px 24px #00000014,0 1.5px 4px #0000000a; margin:0 auto; background:#fff;">
    <MudText Typo="Typo.h5" Class="mb-2" Style="font-weight:600; color:#1976d2;">CRM-Pipeline bearbeiten</MudText>

    @foreach(var status in statusList)
    {
        <MudGrid Class="my-2">
            <MudItem xs="10">
                <MudTextField @bind-Value="status.Name" Label="Statusname" Immediate="true" Style="margin-bottom:0;" />
            </MudItem>
            <MudItem xs="2" Class="d-flex align-center">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => RemoveStatus(status))" />
            </MudItem>
        </MudGrid>
    }

    <MudButton OnClick="AddStatus" Color="Color.Primary" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Style="border-radius:8px; min-width:140px; margin-bottom:14px;">
        Neuer Eintrag
    </MudButton>

    <MudDivider Class="my-4" />

    <MudButton OnClick="Submit" Color="Color.Success" Variant="Variant.Filled" Style="border-radius:8px; min-width:140px;">
        Bearbeiten
    </MudButton>
</MudPaper>

@code {
    private List<Status> statusList = new();
    private Guid currentTeamId;

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        var user = await FillUserInformation();
        currentTeamId = user.Team.Id;
        statusList = await context.Status
            .Where(s => s.TeamId == currentTeamId)
            .OrderBy(s => s.Position)
            .ToListAsync();
    }

    private void AddStatus()
    {
        statusList.Add(new Status
        {
            Id = Guid.NewGuid(),
            Name = string.Empty,
            Position = statusList.Count + 1,
            TeamId = currentTeamId
        });
    }

    private async Task RemoveStatus(Status status)
    {
        statusList.Remove(status);
        for(int i = 0; i < statusList.Count; i++)
        {
            statusList[i].Position = i + 1;
        }

        using var context = await DbFactory.CreateDbContextAsync();
        context.Status.Remove(status);
        await context.SaveChangesAsync();
    }

    private async Task Submit()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        foreach(var status in statusList)
        {
            status.TeamId = currentTeamId;
            if(!await context.Status.AnyAsync(s => s.Id == status.Id))
            {
                await context.Status.AddAsync(status);
            }
            else
            {
                context.Status.Update(status);
            }
        }
        await context.SaveChangesAsync();
        Navigation.NavigateTo(Navigation.Uri, true);
    }

    private async Task<CrmUser?> FillUserInformation()
    {
        await CurrentUserService.LoadCurrentUserAsync();
        var normalizedUserName = CurrentUserService.CurrentUser?.NormalizedUserName?.ToUpper();
        if(string.IsNullOrEmpty(normalizedUserName))
            return null;

        using var context = DbFactory.CreateDbContext();
        return await context.Users
            .Include(u => u.Team)
            .FirstOrDefaultAsync(u => u.NormalizedUserName == normalizedUserName);
    }
}