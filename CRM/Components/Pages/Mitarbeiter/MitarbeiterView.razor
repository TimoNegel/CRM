@page "/mitarbeiter/view/{Id:guid}"
@attribute [Authorize(Roles = "Admin")]


<MudText Typo="Typo.h4" Class="mb-2" Style="font-weight:600; color:#1976d2;">Mitarbeiter Details</MudText>
<br />

<MudCard Style="border-radius:18px; box-shadow:0 4px 24px #00000014,0 1.5px 4px #0000000a; border:1px solid #e0e0e0; max-width:480px;">
    <MudCardContent>
        <MudText Class="mb-1"><b>Vorname:</b> <span style="color:#1976d2;">@mitarbeiter.Vorname</span></MudText>
        <MudText Class="mb-1"><b>Nachname:</b> @mitarbeiter.Nachname</MudText>
        <MudText Class="mb-1"><b>Team:</b> @mitarbeiter.Team.Name</MudText>
        <MudText Class="mb-1"><b>Rolle:</b> @rolle</MudText>
        <MudText Class="mb-1"><b>E-Mail:</b> @mitarbeiter.Email</MudText>
        <MudText Class="mb-1"><b>Telefonnummer:</b> @mitarbeiter.Telefonnummer</MudText>

        <MudDivider Class="my-2" />

        <MudText Typo="Typo.h6" Class="mb-1" Style="font-weight:600;">Adresse</MudText>
        <MudText Class="mb-1"><b>Straße:</b> @mitarbeiter.Adresse.Strasse</MudText>
        <MudText Class="mb-1"><b>Hausnummer:</b> @mitarbeiter.Adresse.Hausnummer</MudText>
        <MudText Class="mb-1"><b>Ort:</b> @mitarbeiter.Adresse.Ort</MudText>
        <MudText Class="mb-1"><b>PLZ:</b> @mitarbeiter.Adresse.PLZ</MudText>
        <MudText Class="mb-1"><b>Land:</b> @mitarbeiter.Adresse.Land</MudText>
    </MudCardContent>

    <MudCardActions Class="mt-2" Style="justify-content: flex-end;">
        <MudButton Color="Color.Primary" Variant="Variant.Filled" Style="border-radius:8px; min-width:100px;" OnClick="() => NavigateToEditMitarbeiterPage()">Bearbeiten</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Outlined" Style="border-radius:8px; min-width:100px; margin-left:12px;" OnClick="() => DeleteMitarbeiter()">Löschen</MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public Guid Id { get; set; }
    private CrmUser mitarbeiter = new CrmUser { Adresse = new Adresse() };
    private string rolle = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        mitarbeiter = await context.Users.Include(m => m.Adresse).Include(m => m.Team).FirstOrDefaultAsync(m => m.IdGuid == Id) ?? new CrmUser();
        rolle = await GetMitarbeiterRole(mitarbeiter.Id);
    }

    private void NavigateToEditMitarbeiterPage()
    {
        Navigation.NavigateTo($"/mitarbeiter/edit/{Id}");
    }

    private async Task DeleteMitarbeiter()
    {
        using var context = DbFactory.CreateDbContext();
        var mitarbeiterToDelete = context.Users.FirstOrDefault(m => m.IdGuid == Id);
        if (mitarbeiterToDelete != null)
        {
            context.Users.Remove(mitarbeiterToDelete);
            await context.SaveChangesAsync();
            Navigation.NavigateTo("/mitarbeiter/view");
        }
    }

    private async Task<string> GetMitarbeiterRole(string id)
    {
        var user = await userManager.FindByIdAsync(id);
        if(user != null)
        {
            var currentRole = await userManager.GetRolesAsync(user);

            return currentRole[0];
        }
        return string.Empty;
    }
}
