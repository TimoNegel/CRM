@page "/mitarbeiter/create"

<MudText Typo="Typo.h4">Mitarbeiter hinzufügen</MudText>
<br />

<MudForm Class="border-2 border-solid mud-border-primary pa-4" onsubmit="@AddMitarbeiter" Model="mitarbeiter">
    <MudSelect @bind-Value="mitarbeiter" Label="User" Required="true">
        @foreach(var k in userListe)
        {
            <MudSelectItem Value="@k">@k.UserName</MudSelectItem>
        }
    </MudSelect>

    <MudTextField @bind-Value="mitarbeiter.Vorname" Label="Vorname" Required="true" />
    <MudTextField @bind-Value="mitarbeiter.Nachname" Label="Nachname" Required="true" />
    <MudTextField @bind-Value="mitarbeiter.Email" Label="E-Mail" Required="true" />
    <MudTextField @bind-Value="mitarbeiter.Telefonnummer" Label="Telefonnummer" Required="true" />
    <MudTextField @bind-Value="mitarbeiter.Adresse.Strasse" Label="Straße" Required="true" />
    <MudTextField @bind-Value="mitarbeiter.Adresse.Hausnummer" Label="Hausnummer" Required="true" />
    <MudTextField @bind-Value="mitarbeiter.Adresse.Ort" Label="Ort" Required="true" />
    <MudTextField @bind-Value="mitarbeiter.Adresse.PLZ" Label="PLZ" Required="true" />
    <MudTextField @bind-Value="mitarbeiter.Adresse.Land" Label="Land" Required="true" />

    <MudSelect @bind-Value="selectedTeam" Label="Team" Required="true">
        @foreach(var k in teamListe)
        {
            <MudSelectItem Value="@k">@k.Name</MudSelectItem>
        }
    </MudSelect>

    <MudTextField @bind-Value="neuerTeamName" Label="Neues Team" />
    <MudButton OnClick="AddNewTeam">Neues Team anlegen</MudButton>

    <br />
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
        Mitarbeiter hinzufügen
    </MudButton>
</MudForm>

@code {
    private CrmUser mitarbeiter = new CrmUser { Adresse = new Adresse() };
    private List<Team> teamListe = new List<Team>();
    private Team selectedTeam;
    private string neuerTeamName = string.Empty;
    private List<CrmUser> userListe = new List<CrmUser>();


    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        teamListe = await context.Teams.ToListAsync();
        userListe = await context.Users.Include(x => x.Adresse).Include(x => x.Team).ToListAsync();
    }

    private async Task AddMitarbeiter()
    {
        mitarbeiter.IdGuid = Guid.NewGuid();
        mitarbeiter.Adresse.Id = Guid.NewGuid();

        using var context = DbFactory.CreateDbContext();
        mitarbeiter.Team = context.Teams.FirstOrDefault(x => x.Id == selectedTeam.Id);
        context.Adressen.Add(mitarbeiter.Adresse);
        context.Users.Update(mitarbeiter);
        await context.SaveChangesAsync();

        Navigation.NavigateTo($"/mitarbeiter/view");
    }

    private async Task AddNewTeam()
    {
        if(string.IsNullOrWhiteSpace(neuerTeamName))
            return;

        var newTeam = new Team { Id = Guid.NewGuid(), Name = neuerTeamName, Pipeline = new Pipeline() };
        using var context = DbFactory.CreateDbContext();
        context.Teams.Add(newTeam);
        await context.SaveChangesAsync();
        teamListe.Add(newTeam);
        selectedTeam = newTeam;
        neuerTeamName = string.Empty;
    }
}