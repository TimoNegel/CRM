@page "/mitarbeiter/edit/{Id:guid}"
@attribute [Authorize(Roles = "Admin")]

<MudText Typo="Typo.h4" Class="mb-2" Style="font-weight:600; color:#1976d2;">Mitarbeiter bearbeiten</MudText>
<br />

<MudForm Class="pa-4"
         Style="border-radius:16px; box-shadow:0 4px 24px #00000014,0 1.5px 4px #0000000a; border:1px solid #e0e0e0; background:#fff;"
         onsubmit="@UpdateMitarbeiter" Model="mitarbeiter">
    <MudTextField @bind-Value="mitarbeiter.Vorname" Label="Vorname" Required="true" Style="margin-bottom:14px;" />
    <MudTextField @bind-Value="mitarbeiter.Nachname" Label="Nachname" Required="true" Style="margin-bottom:14px;" />
    <MudTextField @bind-Value="mitarbeiter.Email" Label="E-Mail" Required="true" Style="margin-bottom:14px;" />
    <MudTextField @bind-Value="mitarbeiter.Telefonnummer" Label="Telefonnummer" Required="true" Style="margin-bottom:14px;" />
    <MudTextField @bind-Value="mitarbeiter.Adresse.Strasse" Label="Straße" Required="true" Style="margin-bottom:14px;" />
    <MudTextField @bind-Value="mitarbeiter.Adresse.Hausnummer" Label="Hausnummer" Required="true" Style="margin-bottom:14px;" />
    <MudTextField @bind-Value="mitarbeiter.Adresse.Ort" Label="Ort" Required="true" Style="margin-bottom:14px;" />
    <MudTextField @bind-Value="mitarbeiter.Adresse.PLZ" Label="PLZ" Required="true" Style="margin-bottom:14px;" />
    <MudTextField @bind-Value="mitarbeiter.Adresse.Land" Label="Land" Required="true" Style="margin-bottom:14px;" />

    <MudSelect @bind-Value="selectedTeam" Label="Team" Required="true" Style="margin-bottom:14px;">
        @foreach(var k in teamListe)
        {
            <MudSelectItem Value="@k">@k.Name</MudSelectItem>
        }
    </MudSelect>

    <MudTextField @bind-Value="neuerTeamName" Label="Neues Team" Style="margin-bottom:14px;" />
    <MudButton OnClick="AddNewTeam" Style="border-radius:8px; min-width:140px; margin-bottom:14px;">Neues Team anlegen</MudButton>

    <MudSelect Class="mt-5" @bind-Value="userRole" Label="Rolle" Required="true" Style="margin-bottom:14px;">
        <MudSelectItem Value="@("Mitarbeiter")">Mitarbeiter</MudSelectItem>
        <MudSelectItem Value="@("Admin")">Admin</MudSelectItem>
    </MudSelect>
    <MudButton class="mt-2" OnClick="ChangeRolle" Variant="Variant.Filled" Color="Color.Primary" Style="border-radius:8px; min-width:140px; margin-bottom:14px;">
        Rolle ändern
    </MudButton>

    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
               Style="border-radius:8px; min-width:140px; margin-top:12px;">
        Änderungen speichern
    </MudButton>
</MudForm>

@code {
    [Parameter] public Guid Id { get; set; }
    private CrmUser mitarbeiter = new CrmUser { Adresse = new Adresse() };

    private List<Team> teamListe = new List<Team>();
    private Team selectedTeam;
    private string neuerTeamName = string.Empty;
    private string userRole = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        mitarbeiter = await context.Users
            .Include(m => m.Adresse)
            .Include(m => m.Team)
            .FirstOrDefaultAsync(m => m.IdGuid == Id) ?? new CrmUser { Adresse = new Adresse() };

        teamListe = await context.Teams.ToListAsync();

        selectedTeam = mitarbeiter.Team;

        var user = await userManager.FindByIdAsync(mitarbeiter.Id);
        if(user != null)
        {
            var currentRole = await userManager.GetRolesAsync(user);
            userRole = currentRole[0];
        }

    }

    private async Task UpdateMitarbeiter()
    {
        using var context = DbFactory.CreateDbContext();
        mitarbeiter.Team = context.Teams.FirstOrDefault(x => x.Id == selectedTeam.Id);


        context.Users.Update(mitarbeiter);
        await context.SaveChangesAsync();
        Navigation.NavigateTo($"/mitarbeiter/view");
    }

    private async Task ChangeRolle()
    {
        if(string.IsNullOrWhiteSpace(userRole))
            return;
        var user = await userManager.FindByIdAsync(mitarbeiter.Id);
        bool adminUserExists = await HasAnyAdminUserAsync();

        if(user != null)
        {
            var currentRole = await userManager.GetRolesAsync(user);

            if(userRole == "Admin" || adminUserExists)
            {

                await userManager.RemoveFromRoleAsync(user, currentRole[0]);

                await userManager.AddToRoleAsync(user, userRole);

            }
        }
        Navigation.NavigateTo($"/mitarbeiter/view");

    }

            private async Task<bool> HasAnyAdminUserAsync()
    {
        var users = userManager.Users.ToList();
        int count = 0;

        foreach(var user in users)
        {
            if(await userManager.IsInRoleAsync(user, "Admin"))
            {
                count++;
                if(count == 2)
                    return true;
            }
        }

        return false;
    }



    

    private async Task AddNewTeam()
    {
        if(string.IsNullOrWhiteSpace(neuerTeamName))
            return;

        var newTeam = new Team { Id = Guid.NewGuid(), Name = neuerTeamName, Pipeline = new Pipeline() };
        using var context = DbFactory.CreateDbContext();
        context.Teams.Add(newTeam);
        await context.SaveChangesAsync();
        teamListe.Add(newTeam);
        selectedTeam = newTeam;
        neuerTeamName = string.Empty;
    }
}