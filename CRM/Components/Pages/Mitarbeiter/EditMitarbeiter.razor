@page "/mitarbeiter/edit/{Id:guid}"
@attribute [Authorize(Roles = "Admin")]

<MudText Typo="Typo.h4">Mitarbeiter bearbeiten</MudText>
<br />

<MudForm Class="border-2 border-solid mud-border-primary pa-4" onsubmit="@UpdateMitarbeiter" Model="mitarbeiter">
    <MudTextField @bind-Value="mitarbeiter.Vorname" Label="Vorname" Required="true" />
    <MudTextField @bind-Value="mitarbeiter.Nachname" Label="Nachname" Required="true" />

    <MudSelect @bind-Value="userRole" Label="Rolle" Required="true">
        <MudSelectItem Value="@("Mitarbeiter")">Mitarbeiter</MudSelectItem>
        <MudSelectItem Value="@("Admin")">Admin</MudSelectItem>
    </MudSelect>

    <MudTextField @bind-Value="mitarbeiter.Email" Label="E-Mail" Required="true" />
    <MudTextField @bind-Value="mitarbeiter.Telefonnummer" Label="Telefonnummer" Required="true" />
    <MudTextField @bind-Value="mitarbeiter.Adresse.Strasse" Label="Straße" Required="true" />
    <MudTextField @bind-Value="mitarbeiter.Adresse.Hausnummer" Label="Hausnummer" Required="true" />
    <MudTextField @bind-Value="mitarbeiter.Adresse.Ort" Label="Ort" Required="true" />
    <MudTextField @bind-Value="mitarbeiter.Adresse.PLZ" Label="PLZ" Required="true" />
    <MudTextField @bind-Value="mitarbeiter.Adresse.Land" Label="Land" Required="true" />

    <MudSelect @bind-Value="selectedTeam" Label="Team" Required="true">
        @foreach(var k in teamListe)
        {
            <MudSelectItem Value="@k">@k.Name</MudSelectItem>
        }
    </MudSelect>

    <MudTextField @bind-Value="neuerTeamName" Label="Neues Team" />
    <MudButton OnClick="AddNewTeam">Neues Team anlegen</MudButton>
    <br />
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
        Änderungen speichern
    </MudButton>
</MudForm>

@code {
    [Parameter] public Guid Id { get; set; }
    private CrmUser mitarbeiter = new CrmUser { Adresse = new Adresse() };

    private List<Team> teamListe = new List<Team>();
    private Team selectedTeam;
    private string neuerTeamName = string.Empty;
    private string userRole = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        mitarbeiter = await context.Users
            .Include(m => m.Adresse)
            .Include(m => m.Team)
            .FirstOrDefaultAsync(m => m.IdGuid == Id) ?? new CrmUser { Adresse = new Adresse() };

        teamListe = await context.Teams.ToListAsync();

        selectedTeam = mitarbeiter.Team;

        var user = await userManager.FindByIdAsync(mitarbeiter.Id);
        if(user != null)
        {
            var currentRole = await userManager.GetRolesAsync(user);
            userRole = currentRole[0];
        }

    }

    private async Task UpdateMitarbeiter()
    {
        using var context = DbFactory.CreateDbContext();
        mitarbeiter.Team = context.Teams.FirstOrDefault(x => x.Id == selectedTeam.Id);

        context.Users.Update(mitarbeiter);
        await context.SaveChangesAsync();

        var user = await userManager.FindByIdAsync(mitarbeiter.Id);
        if(user != null)
        {
            var currentRole = await userManager.GetRolesAsync(user);

            await userManager.RemoveFromRoleAsync(user, currentRole[0]);

            await userManager.AddToRoleAsync(user, userRole);
        }

        Navigation.NavigateTo($"/mitarbeiter/view");
    }

    private async Task AddNewTeam()
    {
        if(string.IsNullOrWhiteSpace(neuerTeamName))
            return;

        var newTeam = new Team { Id = Guid.NewGuid(), Name = neuerTeamName, Pipeline = new Pipeline() };
        using var context = DbFactory.CreateDbContext();
        context.Teams.Add(newTeam);
        await context.SaveChangesAsync();
        teamListe.Add(newTeam);
        selectedTeam = newTeam;
        neuerTeamName = string.Empty;
    }
}