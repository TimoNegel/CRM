@page "/adressen/view"

<MudButton Class="mb-8" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => NavigateToCreateAdressePage()">Adresse hinzufügen</MudButton>

<MudDataGrid Items="@adressen" Filterable="true" FilterMode="DataGridFilterMode.ColumnFilterMenu" FilterCaseSensitivity="DataGridFilterCaseSensitivity.Default">
    <Columns>
        <PropertyColumn Property="x => x.Straße" />
        <PropertyColumn Property="x => x.Hausnummer" />
        <PropertyColumn Property="x => x.Ort" />
        <PropertyColumn Property="x => x.PLZ" />
        <PropertyColumn Property="x => x.Land" />
        <TemplateColumn CellClass="d-flex justify-center">
            <CellTemplate Context="context">
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="() => NavigateToEditAdressePage(context.Item.Id)" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="() => DeleteAdresse(context.Item.Id)" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private List<Adresse> adressen = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        adressen = context.Adressen.ToList();
    }

    private async Task DeleteAdresse(Guid adresseId)
    {
        using var context = DbFactory.CreateDbContext();
        var adresse = context.Adressen.FirstOrDefault(u => u.Id == adresseId);
        if (adresse != null)
        {
            context.Adressen.Remove(adresse);
            await context.SaveChangesAsync();
            adressen = context.Adressen.ToList();
            StateHasChanged();
        }
    }

    private void NavigateToEditAdressePage(Guid id)
    {
        Navigation.NavigateTo($"/adresse/edit/{id}");
    }


    private void NavigateToCreateAdressePage()
    {
        Navigation.NavigateTo($"/adresse/create");
    }
}