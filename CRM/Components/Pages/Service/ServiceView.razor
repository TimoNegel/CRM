@attribute [Authorize]
@page "/service/view/{Id:guid}"

<MudText Typo="Typo.h4" Class="mb-2" Style="font-weight:600; color:#1976d2;">Service Details</MudText>
<br />

<MudCard Style="border-radius:18px; box-shadow:0 4px 24px #00000014,0 1.5px 4px #0000000a; border:1px solid #e0e0e0; max-width:480px;">
    <MudCardContent>
        <MudText Class="mb-1"><b>Name:</b> <span style="color:#1976d2;">@service.ServiceName</span></MudText>
        <MudText Class="mb-1"><b>Aufwandszeit:</b> @service.AufwandsZeit</MudText>
        <MudText Class="mb-1"><b>Preis:</b> @service.Preis €</MudText>
    </MudCardContent>

    <MudCardActions Class="mt-2" Style="justify-content: flex-end;">
        <MudButton Color="Color.Primary" Variant="Variant.Filled" Style="border-radius:8px; min-width:100px;" OnClick="() => NavigateToEditServicePage()">Bearbeiten</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Outlined" Style="border-radius:8px; min-width:100px; margin-left:12px;" OnClick="() => DeleteService()">Löschen</MudButton>
    </MudCardActions>
</MudCard>
@code {
    [Parameter] public Guid Id { get; set; }
    private Service service = new Service();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        service = await context.Services.FirstOrDefaultAsync(s => s.Id == Id) ?? new Service();
    }

    private void NavigateToEditServicePage()
    {
        Navigation.NavigateTo($"/service/edit/{Id}");
    }

    private async Task DeleteService()
    {
        using var context = DbFactory.CreateDbContext();
        var serviceToDelete = context.Services.FirstOrDefault(s => s.Id == Id);
        if (serviceToDelete != null)
        {
            context.Services.Remove(serviceToDelete);
            await context.SaveChangesAsync();
            Navigation.NavigateTo("/services/view");
        }
    }
}
