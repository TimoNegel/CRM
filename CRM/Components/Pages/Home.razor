@page "/"
<div style="overflow-x: auto; white-space: nowrap;">
    <MudDropContainer T="Backend.Models.Auftrag"
                      Items="auftragListe"
                      ItemsSelector="@((item, dropzone) => item.Position == dropzone)"
                      ItemDropped="OnItemDropped"
                      Class="d-inline-flex flex-nowrap px-2"
                      Style="min-height: 400px;">
        <ChildContent>
            @foreach(var stage in statusListe)
            {
                <MudPaper Class="ma-2 pa-2 d-inline-block" Style="min-width: 280px; max-width: 320px;">
                    <MudList T="string" Class="d-flex flex-column mud-height-full">
                        <MudListSubheader>@stage.Name</MudListSubheader>
                        <MudDropZone T="Backend.Models.Auftrag" Identifier="@stage.Position.ToString()" Class="flex-grow-1" />
                    </MudList>
                </MudPaper>
            }
        </ChildContent>
        <ItemRenderer>
            <MudListItem T="string">
                <div>
                    <strong>@context.Kunde.Firmenname</strong><br />
                    <em>Services:</em> @string.Join(", ", context.Services.Select(n => n.ServiceName))<br />
                    <em>Wert:</em> @context.AuftragsValue.ToString("C")
                </div>
            </MudListItem>
        </ItemRenderer>
    </MudDropContainer>
</div>

@code {
    private List<Status> statusListe = new();
    private List<Backend.Models.Auftrag> auftragListe = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        statusListe = await context.Status.ToListAsync();
        statusListe = statusListe.OrderBy(s => s.Position).ToList();
        auftragListe = await context.Auftraege.Include(a => a.Services).Include(a => a.Kunde).ToListAsync();

    }

    // private List<CrmItem> _items = new()
    // {
    //     new CrmItem { CustomerName = "Kunde A", Services = new() { "Beratung", "Support" }, TotalValue = 1200, Stage = "1" },
    //     new CrmItem { CustomerName = "Kunde B", Services = new() { "Entwicklung" }, TotalValue = 3000, Stage = "1" },
    //     new CrmItem { CustomerName = "Kunde C", Services = new() { "Hosting", "Wartung" }, TotalValue = 1800, Stage = "2" },
    //     new CrmItem { CustomerName = "Kunde D", Services = new() { "Analyse" }, TotalValue = 950, Stage = "3" },
    //     new CrmItem { CustomerName = "Kunde E", Services = new() { "Beratung", "Training" }, TotalValue = 2200, Stage = "4" }
    // };

    private void OnItemDropped(MudItemDropInfo<Backend.Models.Auftrag> dropInfo)
    {
        dropInfo.Item.Position = dropInfo.DropzoneIdentifier;
    }

    // public class CrmItem
    // {
    //     public string CustomerName { get; set; }
    //     public List<string> Services { get; set; }
    //     public decimal TotalValue { get; set; }
    //     public string Stage { get; set; }
    // }
}
