@attribute [Authorize]
@page "/auftrag/view/{Id:guid}"
@using CRM.Components.Pages.Kunde
@using CRM.Components.Pages.Service


<MudDialog Class="pb-6 px-6">
    <DialogContent>
        <MudText Typo="Typo.h4">Auftrag Details</MudText>
        <br />

        <MudCard>
            <MudCardContent>
                <MudText><b>Auftragswert:</b> @auftrag.AuftragsValue €</MudText>
                <MudText Style="cursor: pointer;" @onclick="@(() => OpenViewKunde(auftrag.Kunde))">
                    <b>Kunde:</b> @auftrag.Kunde?.Firmenname
                </MudText>

                <MudText>
                    <b>Status:</b> @statusText
                </MudText>

                <MudText>
                    <b>Services:</b>
                </MudText>

                @foreach(var service in auftrag.Services ?? Enumerable.Empty<Service>())
                {
                    <MudText Style="cursor: pointer;" @onclick="@(() => OpenViewService(service))">
                        <b>Name:</b> @service.ServiceName <b>Value:</b> @service.Preis
                    </MudText>
                }



            </MudCardContent>

            <MudCardActions>
                <MudButton Color="Color.Primary" OnClick="() => NavigateToEditAuftragPage()">Bearbeiten</MudButton>
                <MudButton Color="Color.Error" OnClick="() => DeleteAuftrag()">Löschen</MudButton>
            </MudCardActions>
        </MudCard>
    </DialogContent>
</MudDialog>

@code {
    [Parameter] public Guid Id { get; set; }
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    private Auftrag auftrag = new Auftrag();
    private string statusText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        auftrag = await context.Auftraege.Include(a => a.Kunde).Include(a => a.Services).FirstOrDefaultAsync(a => a.Id == Id);
        await context.Status.FirstOrDefaultAsync(s => s.Position == int.Parse(auftrag.Position)).ContinueWith(t => statusText = t.Result?.Name ?? "Unbekannt");

    }

    private void NavigateToEditAuftragPage()
    {
        Navigation.NavigateTo($"/auftrag/edit/{Id}");
    }

    private async Task DeleteAuftrag()
    {
        using var context = DbFactory.CreateDbContext();
        var auftragToDelete = context.Auftraege.FirstOrDefault(a => a.Id == Id);
        if (auftragToDelete != null)
        {
            context.Auftraege.Remove(auftragToDelete);
            await context.SaveChangesAsync();
            MudDialog.Close();
        }
    }

    private void OpenViewKunde(Kunde kunde)
    {
        var options = new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
        };

        var parameters = new DialogParameters
        {
            { "Id", kunde.Id }
        };

        DialogService.Show<KundeView>("", parameters, options);
    }

    private void OpenViewService(Service service)
    {
        var options = new DialogOptions()
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
        };

        var parameters = new DialogParameters
        {
            { "Id", service.Id }
        };

        DialogService.Show<ServiceView>("", parameters, options);
    }
}
