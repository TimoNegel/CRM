@page "/auftrag/create"

<MudText Typo="Typo.h4">Auftrag hinzufügen</MudText>
<br />

<MudForm Class="border-2 border-solid mud-border-primary pa-4" onsubmit="@AddAuftrag" Model="auftrag">

    <MudSelect @bind-Value="auftrag.Kunde" Label="Kunde" Required="true">
        @foreach(var k in kundenListe)
        {
            <MudSelectItem Value="@k">@k.Firmenname</MudSelectItem>
        }
    </MudSelect>

    <MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetSelectedServiceNames))" T="Service" Label="Services" Required="true" MultiSelection="true" @bind-SelectedValues="selectedServices">
       
        @foreach(var s in serviceListe)
        {
            <MudSelectItem Value="@s">@s.ServiceName</MudSelectItem>
        }
    </MudSelect>

    <MudSelect @bind-Value="auftrag.Status" Label="Status" Required="true">
        @foreach(var s in statusListe)
        {
            <MudSelectItem Value="@s">@s.Name</MudSelectItem>
        }
    </MudSelect>

    <br />
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
        Auftrag hinzufügen
    </MudButton>
</MudForm>

@code {
    private Auftrag auftrag = new Auftrag(){Kunde = null, Status = null};
    private List<Kunde> kundenListe = new List<Kunde>();
    private List<Status> statusListe = new List<Status>();
    private List<Service> serviceListe = new List<Service>();
    private IEnumerable<Service> selectedServices = new HashSet<Service>();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        kundenListe = await context.Kunden.ToListAsync();
        statusListe = await context.Status.ToListAsync();
        serviceListe = await context.Services.ToListAsync();
    }

    private async Task AddAuftrag()
    {
        using var context = DbFactory.CreateDbContext();

        auftrag.Id = Guid.NewGuid();

        // Services aus dem Kontext laden
        auftrag.Services = await context.Services
            .Where(s => selectedServices.Select(s => s.Id).ToList().Contains(s.Id))
            .ToListAsync();

        // Kunde aus dem Kontext laden
        auftrag.Kunde = await context.Kunden
            .FirstOrDefaultAsync(k => k.Id == auftrag.Kunde.Id);

        // Status aus dem Kontext laden
        auftrag.Status = await context.Status
            .FirstOrDefaultAsync(s => s.Id == auftrag.Status.Id);

        // Auftragswert berechnen
        auftrag.AuftragsValue = auftrag.Services.Sum(s => s.Preis);

        await context.Auftraege.AddAsync(auftrag);
        await context.SaveChangesAsync();

        Navigation.NavigateTo($"/auftraege/view");
    }


    private string GetSelectedServiceNames(List<string> selectedValues)
    {
        return string.Join(", ", selectedServices.Select(s => s.ServiceName));
    }
}
