@attribute [Authorize]
@page "/auftrag/edit/{Id:guid}"

<MudText Typo="Typo.h4">Auftrag bearbeiten</MudText>
<br />              

<MudDialog Class="pb-6 px-6" Style="max-width: 480px;">
    <DialogContent>
        <MudText Typo="Typo.h4" Class="mb-2" Style="font-weight:600; color:#1976d2;">Auftrag bearbeiten</MudText>
        <MudForm Class="pa-4" Style="border-radius:16px; box-shadow:0 4px 24px #00000014,0 1.5px 4px #0000000a; border:1px solid #e0e0e0; background:#fff;" onsubmit="@UpdateAuftrag" Model="auftrag">
            <MudSelect @bind-Value="auftrag.Kunde" Label="Kunde" Required="true" Style="margin-bottom:18px;">
                @foreach(var k in kundenListe)
                {
                    <MudSelectItem Value="@k">@k.Firmenname</MudSelectItem>
                }
            </MudSelect>

            <MudSelect T="Service"
                       MultiSelectionTextFunc="@(new Func<List<string>, string>(GetSelectedServiceNames))"
                       Label="Services"
                       Required="true"
                       MultiSelection="true"
                       @bind-SelectedValues="selectedServices"
                       Style="margin-bottom:18px;">
                @foreach(var s in serviceListe)
                {
                    <MudSelectItem Value="@s">@s.ServiceName</MudSelectItem>
                }
            </MudSelect>

            <MudSelect @bind-Value="auftrag.Position" Label="Status" Required="true" Style="margin-bottom:18px;">
                @foreach(var s in statusListe)
                {
                    <MudSelectItem Value="@s.Position.ToString()">@s.Name</MudSelectItem>
                }
            </MudSelect>

            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Style="border-radius:8px; min-width:140px; margin-top:12px;">
                Änderungen speichern
            </MudButton>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    [Parameter] public Guid Id { get; set; }
    private Auftrag auftrag = new Auftrag();
    private List<Kunde> kundenListe = new List<Kunde>();
    private List<Status> statusListe = new List<Status>();
    private List<Service> serviceListe = new List<Service>();
    private IEnumerable<Service> selectedServices = new HashSet<Service>();
    private Guid currentTeamId;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        var user = await FillUserInformation();
        currentTeamId = user.Team.Id;

        auftrag = await context.Auftraege.FirstOrDefaultAsync(a => a.Id == Id) ?? new Auftrag();
        kundenListe = await context.Kunden.ToListAsync();
        statusListe = await context.Status
            .Where(s => s.TeamId == currentTeamId)
            .ToListAsync();
        serviceListe = await context.Services.ToListAsync();
        selectedServices = auftrag.Services ?? new HashSet<Service>();
    }

    private async Task<CrmUser?> FillUserInformation()
    {
        await CurrentUserService.LoadCurrentUserAsync();
        var normalizedUserName = CurrentUserService.CurrentUser?.NormalizedUserName?.ToUpper();
        if(string.IsNullOrEmpty(normalizedUserName))
            return null;

        using var context = DbFactory.CreateDbContext();
        return await context.Users
            .Include(u => u.Team)
            .FirstOrDefaultAsync(u => u.NormalizedUserName == normalizedUserName);
    }

    private async Task UpdateAuftrag()
    {
        using var context = DbFactory.CreateDbContext();

        // Auftrag mit seinen aktuellen Services laden
        var existingAuftrag = await context.Auftraege
            .Include(a => a.Services)
            .FirstOrDefaultAsync(a => a.Id == auftrag.Id);

        if(existingAuftrag == null)
        {
            // Fehlerbehandlung, falls Auftrag nicht gefunden wurde
            return;
        }

        // Bestehende Services entfernen
        existingAuftrag.Services.Clear();

        // Neue Services aus dem Kontext laden
        var neueServices = await context.Services
            .Where(s => selectedServices.Select(sel => sel.Id).Contains(s.Id))
            .ToListAsync();

        foreach(var service in neueServices)
        {
            existingAuftrag.Services.Add(service);
        }

        // Kunde und Status aktualisieren
        existingAuftrag.Kunde = await context.Kunden
            .FirstOrDefaultAsync(k => k.Id == auftrag.Kunde.Id);

        existingAuftrag.Position = auftrag.Position;

        // Auftragswert berechnen
        existingAuftrag.AuftragsValue = existingAuftrag.Services.Sum(s => s.Preis);
        await context.SaveChangesAsync();
        Navigation.NavigateTo("/");
    }

    private string GetSelectedServiceNames(List<string> selectedValues)
    {
        return string.Join(", ", selectedServices.Select(s => s.ServiceName));
    }
}
